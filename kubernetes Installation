sudo apt update

----Install Docker:
sudo apt install docker.io -y
sudo systemctl enable docker
sudo systemctl status docker
sudo systemctl start docker


-- Add Kubernetes APT Repository:
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gnupg


--Add Kubernetes GPG Key:
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg


--Add Kubernetes Repository:
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list


--Install kubectl, kubeadm, kubelet:
sudo apt-get update
sudo apt-get install -y kubectl
kubectl version --client
sudo apt install kubeadm kubelet kubectl


--Disable Swap:
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab


--Start and Enable Kubelet
sudo systemctl start kubelet
sudo systemctl enable kubelet
sudo systemctl status kubelet

--containerd:
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install -y containerd.io

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd


--Initialize Kubernetes Cluster
sudo kubeadm init



--Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl cluster-info




--Install Pod Network (Calico)
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

--run working nodes from:
kubeadm join <master-ip>:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:<hash>
..or get from here:
kubeadm token create --print-join-command



--run docker image
docker build -t my-react-app:latest .
--run docker image in kubernetes
kubectl apply -f react-app-deployment.yaml


--remove conainers in Docker
docker rm $(docker ps -aq) -f
--rove images
docker rmi $(docker images -q)
--remove all
docker system prune -a


--docker registry
vi  /etc/docker/daemon.json

{
  "insecure-registries":["192.168.145.130:5000"],

}

docker run -d -p 5000:5000 --restart=always --name registry -v $(pwd)/dregistry:/var/lib/registry registry:latest
curl -X GET http://192.168.145.130:5000/v2/_catalog

docker tag react-app 172.31.41.90:5000/react-app   
docker push 172.31.41.90:5000/react-app



--kubectl get image from private repo
kubectl create secret docker-registry regcred \
  --docker-server=d.genieengage.tech \
  --docker-username=<your-username> \
  --docker-password=<your-password> \

addthis line in depoyment yml file

  spec:
      containers:
      - name: react-app
        image: d.genieengage.tech/react-app
        ports:
        - containerPort: 3000
      imagePullSecrets:
      - name: regcred





--to forcfully delelte depoyment cointenet in kubctl
kubectl delete pod react-app-887cf4f66-s4wmz --grace-period=0 --force




---service
 kubectl get svc react-app-service
